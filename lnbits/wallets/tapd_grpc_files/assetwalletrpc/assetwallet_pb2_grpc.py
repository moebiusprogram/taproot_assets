# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import lnbits.wallets.tapd_grpc_files.assetwalletrpc.assetwallet_pb2 as assetwallet__pb2
import lnbits.wallets.tapd_grpc_files.taprootassets_pb2 as taprootassets__pb2


class AssetWalletStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FundVirtualPsbt = channel.unary_unary(
                '/assetwalletrpc.AssetWallet/FundVirtualPsbt',
                request_serializer=assetwallet__pb2.FundVirtualPsbtRequest.SerializeToString,
                response_deserializer=assetwallet__pb2.FundVirtualPsbtResponse.FromString,
                )
        self.SignVirtualPsbt = channel.unary_unary(
                '/assetwalletrpc.AssetWallet/SignVirtualPsbt',
                request_serializer=assetwallet__pb2.SignVirtualPsbtRequest.SerializeToString,
                response_deserializer=assetwallet__pb2.SignVirtualPsbtResponse.FromString,
                )
        self.AnchorVirtualPsbts = channel.unary_unary(
                '/assetwalletrpc.AssetWallet/AnchorVirtualPsbts',
                request_serializer=assetwallet__pb2.AnchorVirtualPsbtsRequest.SerializeToString,
                response_deserializer=taprootassets__pb2.SendAssetResponse.FromString,
                )
        self.CommitVirtualPsbts = channel.unary_unary(
                '/assetwalletrpc.AssetWallet/CommitVirtualPsbts',
                request_serializer=assetwallet__pb2.CommitVirtualPsbtsRequest.SerializeToString,
                response_deserializer=assetwallet__pb2.CommitVirtualPsbtsResponse.FromString,
                )
        self.PublishAndLogTransfer = channel.unary_unary(
                '/assetwalletrpc.AssetWallet/PublishAndLogTransfer',
                request_serializer=assetwallet__pb2.PublishAndLogRequest.SerializeToString,
                response_deserializer=taprootassets__pb2.SendAssetResponse.FromString,
                )
        self.NextInternalKey = channel.unary_unary(
                '/assetwalletrpc.AssetWallet/NextInternalKey',
                request_serializer=assetwallet__pb2.NextInternalKeyRequest.SerializeToString,
                response_deserializer=assetwallet__pb2.NextInternalKeyResponse.FromString,
                )
        self.NextScriptKey = channel.unary_unary(
                '/assetwalletrpc.AssetWallet/NextScriptKey',
                request_serializer=assetwallet__pb2.NextScriptKeyRequest.SerializeToString,
                response_deserializer=assetwallet__pb2.NextScriptKeyResponse.FromString,
                )
        self.QueryInternalKey = channel.unary_unary(
                '/assetwalletrpc.AssetWallet/QueryInternalKey',
                request_serializer=assetwallet__pb2.QueryInternalKeyRequest.SerializeToString,
                response_deserializer=assetwallet__pb2.QueryInternalKeyResponse.FromString,
                )
        self.QueryScriptKey = channel.unary_unary(
                '/assetwalletrpc.AssetWallet/QueryScriptKey',
                request_serializer=assetwallet__pb2.QueryScriptKeyRequest.SerializeToString,
                response_deserializer=assetwallet__pb2.QueryScriptKeyResponse.FromString,
                )
        self.ProveAssetOwnership = channel.unary_unary(
                '/assetwalletrpc.AssetWallet/ProveAssetOwnership',
                request_serializer=assetwallet__pb2.ProveAssetOwnershipRequest.SerializeToString,
                response_deserializer=assetwallet__pb2.ProveAssetOwnershipResponse.FromString,
                )
        self.VerifyAssetOwnership = channel.unary_unary(
                '/assetwalletrpc.AssetWallet/VerifyAssetOwnership',
                request_serializer=assetwallet__pb2.VerifyAssetOwnershipRequest.SerializeToString,
                response_deserializer=assetwallet__pb2.VerifyAssetOwnershipResponse.FromString,
                )
        self.RemoveUTXOLease = channel.unary_unary(
                '/assetwalletrpc.AssetWallet/RemoveUTXOLease',
                request_serializer=assetwallet__pb2.RemoveUTXOLeaseRequest.SerializeToString,
                response_deserializer=assetwallet__pb2.RemoveUTXOLeaseResponse.FromString,
                )
        self.DeclareScriptKey = channel.unary_unary(
                '/assetwalletrpc.AssetWallet/DeclareScriptKey',
                request_serializer=assetwallet__pb2.DeclareScriptKeyRequest.SerializeToString,
                response_deserializer=assetwallet__pb2.DeclareScriptKeyResponse.FromString,
                )


class AssetWalletServicer(object):
    """Missing associated documentation comment in .proto file."""

    def FundVirtualPsbt(self, request, context):
        """
        FundVirtualPsbt selects inputs from the available asset commitments to fund
        a virtual transaction matching the template.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SignVirtualPsbt(self, request, context):
        """
        SignVirtualPsbt signs the inputs of a virtual transaction and prepares the
        commitments of the inputs and outputs.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AnchorVirtualPsbts(self, request, context):
        """
        AnchorVirtualPsbts merges and then commits multiple virtual transactions in
        a single BTC level anchor transaction. This RPC should be used if the BTC
        level anchor transaction of the assets to be spent are encumbered by a
        normal key and don't require any special spending conditions. For any custom
        spending conditions on the BTC level, the two RPCs CommitVirtualPsbts and
        PublishAndLogTransfer should be used instead (which in combination do the
        same as this RPC but allow for more flexibility).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CommitVirtualPsbts(self, request, context):
        """
        CommitVirtualPsbts creates the output commitments and proofs for the given
        virtual transactions by committing them to the BTC level anchor transaction.
        In addition, the BTC level anchor transaction is funded and prepared up to
        the point where it is ready to be signed.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishAndLogTransfer(self, request, context):
        """
        PublishAndLogTransfer accepts a fully committed and signed anchor
        transaction and publishes it to the Bitcoin network. It also logs the
        transfer of the given active and passive assets in the database and ships
        any outgoing proofs to the counterparties.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NextInternalKey(self, request, context):
        """
        NextInternalKey derives the next internal key for the given key family and
        stores it as an internal key in the database to make sure it is identified
        as a local key later on when importing proofs. While an internal key can
        also be used as the internal key of a script key, it is recommended to use
        the NextScriptKey RPC instead, to make sure the tweaked Taproot output key
        is also recognized as a local key.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NextScriptKey(self, request, context):
        """
        NextScriptKey derives the next script key (and its corresponding internal
        key) and stores them both in the database to make sure they are identified
        as local keys later on when importing proofs.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryInternalKey(self, request, context):
        """
        QueryInternalKey returns the key descriptor for the given internal key.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryScriptKey(self, request, context):
        """
        QueryScriptKey returns the full script key descriptor for the given tweaked
        script key.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProveAssetOwnership(self, request, context):
        """tapcli: `proofs proveownership`
        ProveAssetOwnership creates an ownership proof embedded in an asset
        transition proof. That ownership proof is a signed virtual transaction
        spending the asset with a valid witness to prove the prover owns the keys
        that can spend the asset.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyAssetOwnership(self, request, context):
        """tapcli: `proofs verifyownership`
        VerifyAssetOwnership verifies the asset ownership proof embedded in the
        given transition proof of an asset and returns true if the proof is valid.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveUTXOLease(self, request, context):
        """
        RemoveUTXOLease removes the lease/lock/reservation of the given managed
        UTXO.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeclareScriptKey(self, request, context):
        """
        DeclareScriptKey declares a new script key to the wallet. This is useful
        when the script key contains scripts, which would mean it wouldn't be
        recognized by the wallet automatically. Declaring a script key will make any
        assets sent to the script key be recognized as being local assets.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AssetWalletServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FundVirtualPsbt': grpc.unary_unary_rpc_method_handler(
                    servicer.FundVirtualPsbt,
                    request_deserializer=assetwallet__pb2.FundVirtualPsbtRequest.FromString,
                    response_serializer=assetwallet__pb2.FundVirtualPsbtResponse.SerializeToString,
            ),
            'SignVirtualPsbt': grpc.unary_unary_rpc_method_handler(
                    servicer.SignVirtualPsbt,
                    request_deserializer=assetwallet__pb2.SignVirtualPsbtRequest.FromString,
                    response_serializer=assetwallet__pb2.SignVirtualPsbtResponse.SerializeToString,
            ),
            'AnchorVirtualPsbts': grpc.unary_unary_rpc_method_handler(
                    servicer.AnchorVirtualPsbts,
                    request_deserializer=assetwallet__pb2.AnchorVirtualPsbtsRequest.FromString,
                    response_serializer=taprootassets__pb2.SendAssetResponse.SerializeToString,
            ),
            'CommitVirtualPsbts': grpc.unary_unary_rpc_method_handler(
                    servicer.CommitVirtualPsbts,
                    request_deserializer=assetwallet__pb2.CommitVirtualPsbtsRequest.FromString,
                    response_serializer=assetwallet__pb2.CommitVirtualPsbtsResponse.SerializeToString,
            ),
            'PublishAndLogTransfer': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishAndLogTransfer,
                    request_deserializer=assetwallet__pb2.PublishAndLogRequest.FromString,
                    response_serializer=taprootassets__pb2.SendAssetResponse.SerializeToString,
            ),
            'NextInternalKey': grpc.unary_unary_rpc_method_handler(
                    servicer.NextInternalKey,
                    request_deserializer=assetwallet__pb2.NextInternalKeyRequest.FromString,
                    response_serializer=assetwallet__pb2.NextInternalKeyResponse.SerializeToString,
            ),
            'NextScriptKey': grpc.unary_unary_rpc_method_handler(
                    servicer.NextScriptKey,
                    request_deserializer=assetwallet__pb2.NextScriptKeyRequest.FromString,
                    response_serializer=assetwallet__pb2.NextScriptKeyResponse.SerializeToString,
            ),
            'QueryInternalKey': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryInternalKey,
                    request_deserializer=assetwallet__pb2.QueryInternalKeyRequest.FromString,
                    response_serializer=assetwallet__pb2.QueryInternalKeyResponse.SerializeToString,
            ),
            'QueryScriptKey': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryScriptKey,
                    request_deserializer=assetwallet__pb2.QueryScriptKeyRequest.FromString,
                    response_serializer=assetwallet__pb2.QueryScriptKeyResponse.SerializeToString,
            ),
            'ProveAssetOwnership': grpc.unary_unary_rpc_method_handler(
                    servicer.ProveAssetOwnership,
                    request_deserializer=assetwallet__pb2.ProveAssetOwnershipRequest.FromString,
                    response_serializer=assetwallet__pb2.ProveAssetOwnershipResponse.SerializeToString,
            ),
            'VerifyAssetOwnership': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyAssetOwnership,
                    request_deserializer=assetwallet__pb2.VerifyAssetOwnershipRequest.FromString,
                    response_serializer=assetwallet__pb2.VerifyAssetOwnershipResponse.SerializeToString,
            ),
            'RemoveUTXOLease': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveUTXOLease,
                    request_deserializer=assetwallet__pb2.RemoveUTXOLeaseRequest.FromString,
                    response_serializer=assetwallet__pb2.RemoveUTXOLeaseResponse.SerializeToString,
            ),
            'DeclareScriptKey': grpc.unary_unary_rpc_method_handler(
                    servicer.DeclareScriptKey,
                    request_deserializer=assetwallet__pb2.DeclareScriptKeyRequest.FromString,
                    response_serializer=assetwallet__pb2.DeclareScriptKeyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'assetwalletrpc.AssetWallet', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AssetWallet(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def FundVirtualPsbt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/assetwalletrpc.AssetWallet/FundVirtualPsbt',
            assetwallet__pb2.FundVirtualPsbtRequest.SerializeToString,
            assetwallet__pb2.FundVirtualPsbtResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SignVirtualPsbt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/assetwalletrpc.AssetWallet/SignVirtualPsbt',
            assetwallet__pb2.SignVirtualPsbtRequest.SerializeToString,
            assetwallet__pb2.SignVirtualPsbtResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AnchorVirtualPsbts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/assetwalletrpc.AssetWallet/AnchorVirtualPsbts',
            assetwallet__pb2.AnchorVirtualPsbtsRequest.SerializeToString,
            taprootassets__pb2.SendAssetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CommitVirtualPsbts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/assetwalletrpc.AssetWallet/CommitVirtualPsbts',
            assetwallet__pb2.CommitVirtualPsbtsRequest.SerializeToString,
            assetwallet__pb2.CommitVirtualPsbtsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PublishAndLogTransfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/assetwalletrpc.AssetWallet/PublishAndLogTransfer',
            assetwallet__pb2.PublishAndLogRequest.SerializeToString,
            taprootassets__pb2.SendAssetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NextInternalKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/assetwalletrpc.AssetWallet/NextInternalKey',
            assetwallet__pb2.NextInternalKeyRequest.SerializeToString,
            assetwallet__pb2.NextInternalKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NextScriptKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/assetwalletrpc.AssetWallet/NextScriptKey',
            assetwallet__pb2.NextScriptKeyRequest.SerializeToString,
            assetwallet__pb2.NextScriptKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryInternalKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/assetwalletrpc.AssetWallet/QueryInternalKey',
            assetwallet__pb2.QueryInternalKeyRequest.SerializeToString,
            assetwallet__pb2.QueryInternalKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryScriptKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/assetwalletrpc.AssetWallet/QueryScriptKey',
            assetwallet__pb2.QueryScriptKeyRequest.SerializeToString,
            assetwallet__pb2.QueryScriptKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProveAssetOwnership(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/assetwalletrpc.AssetWallet/ProveAssetOwnership',
            assetwallet__pb2.ProveAssetOwnershipRequest.SerializeToString,
            assetwallet__pb2.ProveAssetOwnershipResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyAssetOwnership(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/assetwalletrpc.AssetWallet/VerifyAssetOwnership',
            assetwallet__pb2.VerifyAssetOwnershipRequest.SerializeToString,
            assetwallet__pb2.VerifyAssetOwnershipResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveUTXOLease(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/assetwalletrpc.AssetWallet/RemoveUTXOLease',
            assetwallet__pb2.RemoveUTXOLeaseRequest.SerializeToString,
            assetwallet__pb2.RemoveUTXOLeaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeclareScriptKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/assetwalletrpc.AssetWallet/DeclareScriptKey',
            assetwallet__pb2.DeclareScriptKeyRequest.SerializeToString,
            assetwallet__pb2.DeclareScriptKeyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
