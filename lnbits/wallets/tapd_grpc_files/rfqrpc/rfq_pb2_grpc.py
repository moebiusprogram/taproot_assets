# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import lnbits.wallets.tapd_grpc_files.rfqrpc.rfq_pb2 as rfq__pb2


class RfqStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddAssetBuyOrder = channel.unary_unary(
                '/rfqrpc.Rfq/AddAssetBuyOrder',
                request_serializer=rfq__pb2.AddAssetBuyOrderRequest.SerializeToString,
                response_deserializer=rfq__pb2.AddAssetBuyOrderResponse.FromString,
                )
        self.AddAssetSellOrder = channel.unary_unary(
                '/rfqrpc.Rfq/AddAssetSellOrder',
                request_serializer=rfq__pb2.AddAssetSellOrderRequest.SerializeToString,
                response_deserializer=rfq__pb2.AddAssetSellOrderResponse.FromString,
                )
        self.AddAssetSellOffer = channel.unary_unary(
                '/rfqrpc.Rfq/AddAssetSellOffer',
                request_serializer=rfq__pb2.AddAssetSellOfferRequest.SerializeToString,
                response_deserializer=rfq__pb2.AddAssetSellOfferResponse.FromString,
                )
        self.AddAssetBuyOffer = channel.unary_unary(
                '/rfqrpc.Rfq/AddAssetBuyOffer',
                request_serializer=rfq__pb2.AddAssetBuyOfferRequest.SerializeToString,
                response_deserializer=rfq__pb2.AddAssetBuyOfferResponse.FromString,
                )
        self.QueryPeerAcceptedQuotes = channel.unary_unary(
                '/rfqrpc.Rfq/QueryPeerAcceptedQuotes',
                request_serializer=rfq__pb2.QueryPeerAcceptedQuotesRequest.SerializeToString,
                response_deserializer=rfq__pb2.QueryPeerAcceptedQuotesResponse.FromString,
                )
        self.SubscribeRfqEventNtfns = channel.unary_stream(
                '/rfqrpc.Rfq/SubscribeRfqEventNtfns',
                request_serializer=rfq__pb2.SubscribeRfqEventNtfnsRequest.SerializeToString,
                response_deserializer=rfq__pb2.RfqEvent.FromString,
                )


class RfqServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddAssetBuyOrder(self, request, context):
        """tapcli: `rfq buyorder`
        AddAssetBuyOrder is used to add a buy order for a specific asset. If a buy
        order already exists for the asset, it will be updated.

        A buy order instructs the RFQ (Request For Quote) system to request a quote
        from a peer for the acquisition of an asset.

        The normal use of a buy order is as follows:
        1. Alice, operating a wallet node, wants to receive a Tap asset as payment
        by issuing a Lightning invoice.
        2. Alice has an asset channel established with Bob's edge node.
        3. Before issuing the invoice, Alice needs to agree on an exchange rate with
        Bob, who will facilitate the asset transfer.
        4. To obtain the best exchange rate, Alice creates a buy order specifying
        the desired asset.
        5. Alice's RFQ subsystem processes the buy order and sends buy requests to
        relevant peers to find the best rate. In this example, Bob is the only
        available peer.
        6. Once Bob provides a satisfactory quote, Alice accepts it.
        7. Alice issues the Lightning invoice, which Charlie will pay.
        8. Instead of paying Alice directly, Charlie pays Bob.
        9. Bob then forwards the agreed amount of the Tap asset to Alice over their
        asset channel.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddAssetSellOrder(self, request, context):
        """tapcli: `rfq sellorder`
        AddAssetSellOrder is used to add a sell order for a specific asset. If a
        sell order already exists for the asset, it will be updated.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddAssetSellOffer(self, request, context):
        """tapcli: `rfq selloffer`
        AddAssetSellOffer is used to add a sell offer for a specific asset. If a
        sell offer already exists for the asset, it will be updated.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddAssetBuyOffer(self, request, context):
        """tapcli: `rfq buyoffer`
        AddAssetBuyOffer is used to add a buy offer for a specific asset. If a
        buy offer already exists for the asset, it will be updated.

        A buy offer is used by the node to selectively accept or reject incoming
        asset sell quote requests before price is considered.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryPeerAcceptedQuotes(self, request, context):
        """tapcli: `rfq acceptedquotes`
        QueryPeerAcceptedQuotes is used to query for quotes that were requested by
        our node and have been accepted our peers.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeRfqEventNtfns(self, request, context):
        """
        SubscribeRfqEventNtfns is used to subscribe to RFQ events.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RfqServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddAssetBuyOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.AddAssetBuyOrder,
                    request_deserializer=rfq__pb2.AddAssetBuyOrderRequest.FromString,
                    response_serializer=rfq__pb2.AddAssetBuyOrderResponse.SerializeToString,
            ),
            'AddAssetSellOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.AddAssetSellOrder,
                    request_deserializer=rfq__pb2.AddAssetSellOrderRequest.FromString,
                    response_serializer=rfq__pb2.AddAssetSellOrderResponse.SerializeToString,
            ),
            'AddAssetSellOffer': grpc.unary_unary_rpc_method_handler(
                    servicer.AddAssetSellOffer,
                    request_deserializer=rfq__pb2.AddAssetSellOfferRequest.FromString,
                    response_serializer=rfq__pb2.AddAssetSellOfferResponse.SerializeToString,
            ),
            'AddAssetBuyOffer': grpc.unary_unary_rpc_method_handler(
                    servicer.AddAssetBuyOffer,
                    request_deserializer=rfq__pb2.AddAssetBuyOfferRequest.FromString,
                    response_serializer=rfq__pb2.AddAssetBuyOfferResponse.SerializeToString,
            ),
            'QueryPeerAcceptedQuotes': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryPeerAcceptedQuotes,
                    request_deserializer=rfq__pb2.QueryPeerAcceptedQuotesRequest.FromString,
                    response_serializer=rfq__pb2.QueryPeerAcceptedQuotesResponse.SerializeToString,
            ),
            'SubscribeRfqEventNtfns': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeRfqEventNtfns,
                    request_deserializer=rfq__pb2.SubscribeRfqEventNtfnsRequest.FromString,
                    response_serializer=rfq__pb2.RfqEvent.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rfqrpc.Rfq', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Rfq(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddAssetBuyOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rfqrpc.Rfq/AddAssetBuyOrder',
            rfq__pb2.AddAssetBuyOrderRequest.SerializeToString,
            rfq__pb2.AddAssetBuyOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddAssetSellOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rfqrpc.Rfq/AddAssetSellOrder',
            rfq__pb2.AddAssetSellOrderRequest.SerializeToString,
            rfq__pb2.AddAssetSellOrderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddAssetSellOffer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rfqrpc.Rfq/AddAssetSellOffer',
            rfq__pb2.AddAssetSellOfferRequest.SerializeToString,
            rfq__pb2.AddAssetSellOfferResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddAssetBuyOffer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rfqrpc.Rfq/AddAssetBuyOffer',
            rfq__pb2.AddAssetBuyOfferRequest.SerializeToString,
            rfq__pb2.AddAssetBuyOfferResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryPeerAcceptedQuotes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rfqrpc.Rfq/QueryPeerAcceptedQuotes',
            rfq__pb2.QueryPeerAcceptedQuotesRequest.SerializeToString,
            rfq__pb2.QueryPeerAcceptedQuotesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeRfqEventNtfns(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/rfqrpc.Rfq/SubscribeRfqEventNtfns',
            rfq__pb2.SubscribeRfqEventNtfnsRequest.SerializeToString,
            rfq__pb2.RfqEvent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
