# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import lnbits.wallets.tapd_grpc_files.tapchannelrpc.tapchannel_pb2 as tapchannel__pb2


class TaprootAssetChannelsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FundChannel = channel.unary_unary(
                '/tapchannelrpc.TaprootAssetChannels/FundChannel',
                request_serializer=tapchannel__pb2.FundChannelRequest.SerializeToString,
                response_deserializer=tapchannel__pb2.FundChannelResponse.FromString,
                )
        self.EncodeCustomRecords = channel.unary_unary(
                '/tapchannelrpc.TaprootAssetChannels/EncodeCustomRecords',
                request_serializer=tapchannel__pb2.EncodeCustomRecordsRequest.SerializeToString,
                response_deserializer=tapchannel__pb2.EncodeCustomRecordsResponse.FromString,
                )
        self.SendPayment = channel.unary_stream(
                '/tapchannelrpc.TaprootAssetChannels/SendPayment',
                request_serializer=tapchannel__pb2.SendPaymentRequest.SerializeToString,
                response_deserializer=tapchannel__pb2.SendPaymentResponse.FromString,
                )
        self.AddInvoice = channel.unary_unary(
                '/tapchannelrpc.TaprootAssetChannels/AddInvoice',
                request_serializer=tapchannel__pb2.AddInvoiceRequest.SerializeToString,
                response_deserializer=tapchannel__pb2.AddInvoiceResponse.FromString,
                )
        self.DecodeAssetPayReq = channel.unary_unary(
                '/tapchannelrpc.TaprootAssetChannels/DecodeAssetPayReq',
                request_serializer=tapchannel__pb2.AssetPayReq.SerializeToString,
                response_deserializer=tapchannel__pb2.AssetPayReqResponse.FromString,
                )


class TaprootAssetChannelsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def FundChannel(self, request, context):
        """
        FundChannel initiates the channel funding negotiation with a peer for the
        creation of a channel that contains a specified amount of a given asset.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EncodeCustomRecords(self, request, context):
        """
        EncodeCustomRecords allows RPC users to encode Taproot Asset channel related
        data into the TLV format that is used in the custom records of the lnd
        payment or other channel related RPCs. This RPC is completely stateless and
        does not perform any checks on the data provided, other than pure format
        validation.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendPayment(self, request, context):
        """
        SendPayment is a wrapper around lnd's routerrpc.SendPaymentV2 RPC method
        with asset specific parameters. It allows RPC users to send asset keysend
        payments (direct payments) or payments to an invoice with a specified asset
        amount.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddInvoice(self, request, context):
        """
        AddInvoice is a wrapper around lnd's lnrpc.AddInvoice method with asset
        specific parameters. It allows RPC users to create invoices that correspond
        to the specified asset amount.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DecodeAssetPayReq(self, request, context):
        """
        DecodeAssetPayReq is similar to lnd's lnrpc.DecodePayReq, but it accepts an
        asset ID and returns the invoice amount expressed in asset units along side
        the normal information.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaprootAssetChannelsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FundChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.FundChannel,
                    request_deserializer=tapchannel__pb2.FundChannelRequest.FromString,
                    response_serializer=tapchannel__pb2.FundChannelResponse.SerializeToString,
            ),
            'EncodeCustomRecords': grpc.unary_unary_rpc_method_handler(
                    servicer.EncodeCustomRecords,
                    request_deserializer=tapchannel__pb2.EncodeCustomRecordsRequest.FromString,
                    response_serializer=tapchannel__pb2.EncodeCustomRecordsResponse.SerializeToString,
            ),
            'SendPayment': grpc.unary_stream_rpc_method_handler(
                    servicer.SendPayment,
                    request_deserializer=tapchannel__pb2.SendPaymentRequest.FromString,
                    response_serializer=tapchannel__pb2.SendPaymentResponse.SerializeToString,
            ),
            'AddInvoice': grpc.unary_unary_rpc_method_handler(
                    servicer.AddInvoice,
                    request_deserializer=tapchannel__pb2.AddInvoiceRequest.FromString,
                    response_serializer=tapchannel__pb2.AddInvoiceResponse.SerializeToString,
            ),
            'DecodeAssetPayReq': grpc.unary_unary_rpc_method_handler(
                    servicer.DecodeAssetPayReq,
                    request_deserializer=tapchannel__pb2.AssetPayReq.FromString,
                    response_serializer=tapchannel__pb2.AssetPayReqResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tapchannelrpc.TaprootAssetChannels', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TaprootAssetChannels(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def FundChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tapchannelrpc.TaprootAssetChannels/FundChannel',
            tapchannel__pb2.FundChannelRequest.SerializeToString,
            tapchannel__pb2.FundChannelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EncodeCustomRecords(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tapchannelrpc.TaprootAssetChannels/EncodeCustomRecords',
            tapchannel__pb2.EncodeCustomRecordsRequest.SerializeToString,
            tapchannel__pb2.EncodeCustomRecordsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendPayment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/tapchannelrpc.TaprootAssetChannels/SendPayment',
            tapchannel__pb2.SendPaymentRequest.SerializeToString,
            tapchannel__pb2.SendPaymentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddInvoice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tapchannelrpc.TaprootAssetChannels/AddInvoice',
            tapchannel__pb2.AddInvoiceRequest.SerializeToString,
            tapchannel__pb2.AddInvoiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DecodeAssetPayReq(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tapchannelrpc.TaprootAssetChannels/DecodeAssetPayReq',
            tapchannel__pb2.AssetPayReq.SerializeToString,
            tapchannel__pb2.AssetPayReqResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
