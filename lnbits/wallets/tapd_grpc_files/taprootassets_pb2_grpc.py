# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import lnbits.wallets.tapd_grpc_files.taprootassets_pb2 as taprootassets__pb2


class TaprootAssetsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListAssets = channel.unary_unary(
                '/taprpc.TaprootAssets/ListAssets',
                request_serializer=taprootassets__pb2.ListAssetRequest.SerializeToString,
                response_deserializer=taprootassets__pb2.ListAssetResponse.FromString,
                )
        self.ListUtxos = channel.unary_unary(
                '/taprpc.TaprootAssets/ListUtxos',
                request_serializer=taprootassets__pb2.ListUtxosRequest.SerializeToString,
                response_deserializer=taprootassets__pb2.ListUtxosResponse.FromString,
                )
        self.ListGroups = channel.unary_unary(
                '/taprpc.TaprootAssets/ListGroups',
                request_serializer=taprootassets__pb2.ListGroupsRequest.SerializeToString,
                response_deserializer=taprootassets__pb2.ListGroupsResponse.FromString,
                )
        self.ListBalances = channel.unary_unary(
                '/taprpc.TaprootAssets/ListBalances',
                request_serializer=taprootassets__pb2.ListBalancesRequest.SerializeToString,
                response_deserializer=taprootassets__pb2.ListBalancesResponse.FromString,
                )
        self.ListTransfers = channel.unary_unary(
                '/taprpc.TaprootAssets/ListTransfers',
                request_serializer=taprootassets__pb2.ListTransfersRequest.SerializeToString,
                response_deserializer=taprootassets__pb2.ListTransfersResponse.FromString,
                )
        self.StopDaemon = channel.unary_unary(
                '/taprpc.TaprootAssets/StopDaemon',
                request_serializer=taprootassets__pb2.StopRequest.SerializeToString,
                response_deserializer=taprootassets__pb2.StopResponse.FromString,
                )
        self.DebugLevel = channel.unary_unary(
                '/taprpc.TaprootAssets/DebugLevel',
                request_serializer=taprootassets__pb2.DebugLevelRequest.SerializeToString,
                response_deserializer=taprootassets__pb2.DebugLevelResponse.FromString,
                )
        self.QueryAddrs = channel.unary_unary(
                '/taprpc.TaprootAssets/QueryAddrs',
                request_serializer=taprootassets__pb2.QueryAddrRequest.SerializeToString,
                response_deserializer=taprootassets__pb2.QueryAddrResponse.FromString,
                )
        self.NewAddr = channel.unary_unary(
                '/taprpc.TaprootAssets/NewAddr',
                request_serializer=taprootassets__pb2.NewAddrRequest.SerializeToString,
                response_deserializer=taprootassets__pb2.Addr.FromString,
                )
        self.DecodeAddr = channel.unary_unary(
                '/taprpc.TaprootAssets/DecodeAddr',
                request_serializer=taprootassets__pb2.DecodeAddrRequest.SerializeToString,
                response_deserializer=taprootassets__pb2.Addr.FromString,
                )
        self.AddrReceives = channel.unary_unary(
                '/taprpc.TaprootAssets/AddrReceives',
                request_serializer=taprootassets__pb2.AddrReceivesRequest.SerializeToString,
                response_deserializer=taprootassets__pb2.AddrReceivesResponse.FromString,
                )
        self.VerifyProof = channel.unary_unary(
                '/taprpc.TaprootAssets/VerifyProof',
                request_serializer=taprootassets__pb2.ProofFile.SerializeToString,
                response_deserializer=taprootassets__pb2.VerifyProofResponse.FromString,
                )
        self.DecodeProof = channel.unary_unary(
                '/taprpc.TaprootAssets/DecodeProof',
                request_serializer=taprootassets__pb2.DecodeProofRequest.SerializeToString,
                response_deserializer=taprootassets__pb2.DecodeProofResponse.FromString,
                )
        self.ExportProof = channel.unary_unary(
                '/taprpc.TaprootAssets/ExportProof',
                request_serializer=taprootassets__pb2.ExportProofRequest.SerializeToString,
                response_deserializer=taprootassets__pb2.ProofFile.FromString,
                )
        self.UnpackProofFile = channel.unary_unary(
                '/taprpc.TaprootAssets/UnpackProofFile',
                request_serializer=taprootassets__pb2.UnpackProofFileRequest.SerializeToString,
                response_deserializer=taprootassets__pb2.UnpackProofFileResponse.FromString,
                )
        self.SendAsset = channel.unary_unary(
                '/taprpc.TaprootAssets/SendAsset',
                request_serializer=taprootassets__pb2.SendAssetRequest.SerializeToString,
                response_deserializer=taprootassets__pb2.SendAssetResponse.FromString,
                )
        self.BurnAsset = channel.unary_unary(
                '/taprpc.TaprootAssets/BurnAsset',
                request_serializer=taprootassets__pb2.BurnAssetRequest.SerializeToString,
                response_deserializer=taprootassets__pb2.BurnAssetResponse.FromString,
                )
        self.ListBurns = channel.unary_unary(
                '/taprpc.TaprootAssets/ListBurns',
                request_serializer=taprootassets__pb2.ListBurnsRequest.SerializeToString,
                response_deserializer=taprootassets__pb2.ListBurnsResponse.FromString,
                )
        self.GetInfo = channel.unary_unary(
                '/taprpc.TaprootAssets/GetInfo',
                request_serializer=taprootassets__pb2.GetInfoRequest.SerializeToString,
                response_deserializer=taprootassets__pb2.GetInfoResponse.FromString,
                )
        self.FetchAssetMeta = channel.unary_unary(
                '/taprpc.TaprootAssets/FetchAssetMeta',
                request_serializer=taprootassets__pb2.FetchAssetMetaRequest.SerializeToString,
                response_deserializer=taprootassets__pb2.AssetMeta.FromString,
                )
        self.SubscribeReceiveEvents = channel.unary_stream(
                '/taprpc.TaprootAssets/SubscribeReceiveEvents',
                request_serializer=taprootassets__pb2.SubscribeReceiveEventsRequest.SerializeToString,
                response_deserializer=taprootassets__pb2.ReceiveEvent.FromString,
                )
        self.SubscribeSendEvents = channel.unary_stream(
                '/taprpc.TaprootAssets/SubscribeSendEvents',
                request_serializer=taprootassets__pb2.SubscribeSendEventsRequest.SerializeToString,
                response_deserializer=taprootassets__pb2.SendEvent.FromString,
                )
        self.RegisterTransfer = channel.unary_unary(
                '/taprpc.TaprootAssets/RegisterTransfer',
                request_serializer=taprootassets__pb2.RegisterTransferRequest.SerializeToString,
                response_deserializer=taprootassets__pb2.RegisterTransferResponse.FromString,
                )


class TaprootAssetsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListAssets(self, request, context):
        """tapcli: `assets list`
        ListAssets lists the set of assets owned by the target daemon.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListUtxos(self, request, context):
        """tapcli: `assets utxos`
        ListUtxos lists the UTXOs managed by the target daemon, and the assets they
        hold.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListGroups(self, request, context):
        """tapcli: `assets groups`
        ListGroups lists the asset groups known to the target daemon, and the assets
        held in each group.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBalances(self, request, context):
        """tapcli: `assets balance`
        ListBalances lists asset balances
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTransfers(self, request, context):
        """tapcli: `assets transfers`
        ListTransfers lists outbound asset transfers tracked by the target daemon.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopDaemon(self, request, context):
        """tapcli: `stop`
        StopDaemon will send a shutdown request to the interrupt handler, triggering
        a graceful shutdown of the daemon.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DebugLevel(self, request, context):
        """tapcli: `debuglevel`
        DebugLevel allows a caller to programmatically set the logging verbosity of
        tapd. The logging can be targeted according to a coarse daemon-wide logging
        level, or in a granular fashion to specify the logging for a target
        sub-system.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryAddrs(self, request, context):
        """tapcli: `addrs query`
        QueryAddrs queries the set of Taproot Asset addresses stored in the
        database.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NewAddr(self, request, context):
        """tapcli: `addrs new`
        NewAddr makes a new address from the set of request params.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DecodeAddr(self, request, context):
        """tapcli: `addrs decode`
        DecodeAddr decode a Taproot Asset address into a partial asset message that
        represents the asset it wants to receive.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddrReceives(self, request, context):
        """tapcli: `addrs receives`
        List all receives for incoming asset transfers for addresses that were
        created previously.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifyProof(self, request, context):
        """tapcli: `proofs verify`
        VerifyProof attempts to verify a given proof file that claims to be anchored
        at the specified genesis point.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DecodeProof(self, request, context):
        """tapcli: `proofs decode`
        DecodeProof attempts to decode a given proof file into human readable
        format.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExportProof(self, request, context):
        """tapcli: `proofs export`
        ExportProof exports the latest raw proof file anchored at the specified
        script_key.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnpackProofFile(self, request, context):
        """tapcli: `proofs unpack`
        UnpackProofFile unpacks a proof file into a list of the individual raw
        proofs in the proof chain.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendAsset(self, request, context):
        """tapcli: `assets send`
        SendAsset uses one or multiple passed Taproot Asset address(es) to attempt
        to complete an asset send. The method returns information w.r.t the on chain
        send, as well as the proof file information the receiver needs to fully
        receive the asset.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BurnAsset(self, request, context):
        """tapcli: `assets burn`
        BurnAsset burns the given number of units of a given asset by sending them
        to a provably un-spendable script key. Burning means irrevocably destroying
        a certain number of assets, reducing the total supply of the asset. Because
        burning is such a destructive and non-reversible operation, some specific
        values need to be set in the request to avoid accidental burns.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBurns(self, request, context):
        """tapcli: `assets listburns`
        ListBurns lists the asset burns that this wallet has performed. These assets
        are not recoverable in any way. Filters may be applied to return more
        specific results.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInfo(self, request, context):
        """tapcli: `getinfo`
        GetInfo returns the information for the node.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchAssetMeta(self, request, context):
        """tapcli: `assets meta`
        FetchAssetMeta allows a caller to fetch the reveal meta data for an asset
        either by the asset ID for that asset, or a meta hash.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeReceiveEvents(self, request, context):
        """tapcli: `events receive`
        SubscribeReceiveEvents allows a caller to subscribe to receive events for
        incoming asset transfers.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeSendEvents(self, request, context):
        """tapcli: `events send`
        SubscribeSendEvents allows a caller to subscribe to send events for outgoing
        asset transfers.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterTransfer(self, request, context):
        """
        RegisterTransfer informs the daemon about a new inbound transfer that has
        happened. This is used for interactive transfers where no TAP address is
        involved and the recipient is aware of the transfer through an out-of-band
        protocol but the daemon hasn't been informed about the completion of the
        transfer. For this to work, the proof must already be in the recipient's
        local universe (e.g. through the use of the universerpc.ImportProof RPC or
        the universe proof courier and universe sync mechanisms) and this call
        simply instructs the daemon to detect the transfer as an asset it owns.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TaprootAssetsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListAssets': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAssets,
                    request_deserializer=taprootassets__pb2.ListAssetRequest.FromString,
                    response_serializer=taprootassets__pb2.ListAssetResponse.SerializeToString,
            ),
            'ListUtxos': grpc.unary_unary_rpc_method_handler(
                    servicer.ListUtxos,
                    request_deserializer=taprootassets__pb2.ListUtxosRequest.FromString,
                    response_serializer=taprootassets__pb2.ListUtxosResponse.SerializeToString,
            ),
            'ListGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.ListGroups,
                    request_deserializer=taprootassets__pb2.ListGroupsRequest.FromString,
                    response_serializer=taprootassets__pb2.ListGroupsResponse.SerializeToString,
            ),
            'ListBalances': grpc.unary_unary_rpc_method_handler(
                    servicer.ListBalances,
                    request_deserializer=taprootassets__pb2.ListBalancesRequest.FromString,
                    response_serializer=taprootassets__pb2.ListBalancesResponse.SerializeToString,
            ),
            'ListTransfers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTransfers,
                    request_deserializer=taprootassets__pb2.ListTransfersRequest.FromString,
                    response_serializer=taprootassets__pb2.ListTransfersResponse.SerializeToString,
            ),
            'StopDaemon': grpc.unary_unary_rpc_method_handler(
                    servicer.StopDaemon,
                    request_deserializer=taprootassets__pb2.StopRequest.FromString,
                    response_serializer=taprootassets__pb2.StopResponse.SerializeToString,
            ),
            'DebugLevel': grpc.unary_unary_rpc_method_handler(
                    servicer.DebugLevel,
                    request_deserializer=taprootassets__pb2.DebugLevelRequest.FromString,
                    response_serializer=taprootassets__pb2.DebugLevelResponse.SerializeToString,
            ),
            'QueryAddrs': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryAddrs,
                    request_deserializer=taprootassets__pb2.QueryAddrRequest.FromString,
                    response_serializer=taprootassets__pb2.QueryAddrResponse.SerializeToString,
            ),
            'NewAddr': grpc.unary_unary_rpc_method_handler(
                    servicer.NewAddr,
                    request_deserializer=taprootassets__pb2.NewAddrRequest.FromString,
                    response_serializer=taprootassets__pb2.Addr.SerializeToString,
            ),
            'DecodeAddr': grpc.unary_unary_rpc_method_handler(
                    servicer.DecodeAddr,
                    request_deserializer=taprootassets__pb2.DecodeAddrRequest.FromString,
                    response_serializer=taprootassets__pb2.Addr.SerializeToString,
            ),
            'AddrReceives': grpc.unary_unary_rpc_method_handler(
                    servicer.AddrReceives,
                    request_deserializer=taprootassets__pb2.AddrReceivesRequest.FromString,
                    response_serializer=taprootassets__pb2.AddrReceivesResponse.SerializeToString,
            ),
            'VerifyProof': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifyProof,
                    request_deserializer=taprootassets__pb2.ProofFile.FromString,
                    response_serializer=taprootassets__pb2.VerifyProofResponse.SerializeToString,
            ),
            'DecodeProof': grpc.unary_unary_rpc_method_handler(
                    servicer.DecodeProof,
                    request_deserializer=taprootassets__pb2.DecodeProofRequest.FromString,
                    response_serializer=taprootassets__pb2.DecodeProofResponse.SerializeToString,
            ),
            'ExportProof': grpc.unary_unary_rpc_method_handler(
                    servicer.ExportProof,
                    request_deserializer=taprootassets__pb2.ExportProofRequest.FromString,
                    response_serializer=taprootassets__pb2.ProofFile.SerializeToString,
            ),
            'UnpackProofFile': grpc.unary_unary_rpc_method_handler(
                    servicer.UnpackProofFile,
                    request_deserializer=taprootassets__pb2.UnpackProofFileRequest.FromString,
                    response_serializer=taprootassets__pb2.UnpackProofFileResponse.SerializeToString,
            ),
            'SendAsset': grpc.unary_unary_rpc_method_handler(
                    servicer.SendAsset,
                    request_deserializer=taprootassets__pb2.SendAssetRequest.FromString,
                    response_serializer=taprootassets__pb2.SendAssetResponse.SerializeToString,
            ),
            'BurnAsset': grpc.unary_unary_rpc_method_handler(
                    servicer.BurnAsset,
                    request_deserializer=taprootassets__pb2.BurnAssetRequest.FromString,
                    response_serializer=taprootassets__pb2.BurnAssetResponse.SerializeToString,
            ),
            'ListBurns': grpc.unary_unary_rpc_method_handler(
                    servicer.ListBurns,
                    request_deserializer=taprootassets__pb2.ListBurnsRequest.FromString,
                    response_serializer=taprootassets__pb2.ListBurnsResponse.SerializeToString,
            ),
            'GetInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInfo,
                    request_deserializer=taprootassets__pb2.GetInfoRequest.FromString,
                    response_serializer=taprootassets__pb2.GetInfoResponse.SerializeToString,
            ),
            'FetchAssetMeta': grpc.unary_unary_rpc_method_handler(
                    servicer.FetchAssetMeta,
                    request_deserializer=taprootassets__pb2.FetchAssetMetaRequest.FromString,
                    response_serializer=taprootassets__pb2.AssetMeta.SerializeToString,
            ),
            'SubscribeReceiveEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeReceiveEvents,
                    request_deserializer=taprootassets__pb2.SubscribeReceiveEventsRequest.FromString,
                    response_serializer=taprootassets__pb2.ReceiveEvent.SerializeToString,
            ),
            'SubscribeSendEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeSendEvents,
                    request_deserializer=taprootassets__pb2.SubscribeSendEventsRequest.FromString,
                    response_serializer=taprootassets__pb2.SendEvent.SerializeToString,
            ),
            'RegisterTransfer': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterTransfer,
                    request_deserializer=taprootassets__pb2.RegisterTransferRequest.FromString,
                    response_serializer=taprootassets__pb2.RegisterTransferResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'taprpc.TaprootAssets', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TaprootAssets(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListAssets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/taprpc.TaprootAssets/ListAssets',
            taprootassets__pb2.ListAssetRequest.SerializeToString,
            taprootassets__pb2.ListAssetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListUtxos(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/taprpc.TaprootAssets/ListUtxos',
            taprootassets__pb2.ListUtxosRequest.SerializeToString,
            taprootassets__pb2.ListUtxosResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/taprpc.TaprootAssets/ListGroups',
            taprootassets__pb2.ListGroupsRequest.SerializeToString,
            taprootassets__pb2.ListGroupsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListBalances(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/taprpc.TaprootAssets/ListBalances',
            taprootassets__pb2.ListBalancesRequest.SerializeToString,
            taprootassets__pb2.ListBalancesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListTransfers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/taprpc.TaprootAssets/ListTransfers',
            taprootassets__pb2.ListTransfersRequest.SerializeToString,
            taprootassets__pb2.ListTransfersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopDaemon(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/taprpc.TaprootAssets/StopDaemon',
            taprootassets__pb2.StopRequest.SerializeToString,
            taprootassets__pb2.StopResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DebugLevel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/taprpc.TaprootAssets/DebugLevel',
            taprootassets__pb2.DebugLevelRequest.SerializeToString,
            taprootassets__pb2.DebugLevelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryAddrs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/taprpc.TaprootAssets/QueryAddrs',
            taprootassets__pb2.QueryAddrRequest.SerializeToString,
            taprootassets__pb2.QueryAddrResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NewAddr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/taprpc.TaprootAssets/NewAddr',
            taprootassets__pb2.NewAddrRequest.SerializeToString,
            taprootassets__pb2.Addr.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DecodeAddr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/taprpc.TaprootAssets/DecodeAddr',
            taprootassets__pb2.DecodeAddrRequest.SerializeToString,
            taprootassets__pb2.Addr.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddrReceives(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/taprpc.TaprootAssets/AddrReceives',
            taprootassets__pb2.AddrReceivesRequest.SerializeToString,
            taprootassets__pb2.AddrReceivesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifyProof(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/taprpc.TaprootAssets/VerifyProof',
            taprootassets__pb2.ProofFile.SerializeToString,
            taprootassets__pb2.VerifyProofResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DecodeProof(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/taprpc.TaprootAssets/DecodeProof',
            taprootassets__pb2.DecodeProofRequest.SerializeToString,
            taprootassets__pb2.DecodeProofResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExportProof(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/taprpc.TaprootAssets/ExportProof',
            taprootassets__pb2.ExportProofRequest.SerializeToString,
            taprootassets__pb2.ProofFile.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnpackProofFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/taprpc.TaprootAssets/UnpackProofFile',
            taprootassets__pb2.UnpackProofFileRequest.SerializeToString,
            taprootassets__pb2.UnpackProofFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendAsset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/taprpc.TaprootAssets/SendAsset',
            taprootassets__pb2.SendAssetRequest.SerializeToString,
            taprootassets__pb2.SendAssetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BurnAsset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/taprpc.TaprootAssets/BurnAsset',
            taprootassets__pb2.BurnAssetRequest.SerializeToString,
            taprootassets__pb2.BurnAssetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListBurns(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/taprpc.TaprootAssets/ListBurns',
            taprootassets__pb2.ListBurnsRequest.SerializeToString,
            taprootassets__pb2.ListBurnsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/taprpc.TaprootAssets/GetInfo',
            taprootassets__pb2.GetInfoRequest.SerializeToString,
            taprootassets__pb2.GetInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FetchAssetMeta(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/taprpc.TaprootAssets/FetchAssetMeta',
            taprootassets__pb2.FetchAssetMetaRequest.SerializeToString,
            taprootassets__pb2.AssetMeta.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeReceiveEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/taprpc.TaprootAssets/SubscribeReceiveEvents',
            taprootassets__pb2.SubscribeReceiveEventsRequest.SerializeToString,
            taprootassets__pb2.ReceiveEvent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeSendEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/taprpc.TaprootAssets/SubscribeSendEvents',
            taprootassets__pb2.SubscribeSendEventsRequest.SerializeToString,
            taprootassets__pb2.SendEvent.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterTransfer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/taprpc.TaprootAssets/RegisterTransfer',
            taprootassets__pb2.RegisterTransferRequest.SerializeToString,
            taprootassets__pb2.RegisterTransferResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
